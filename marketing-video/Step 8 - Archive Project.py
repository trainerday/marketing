#!/usr/bin/env python3
"""
Step 8 - Archive Project

Archives the current video project by:
1. Reading the video content from resemble-a-roll.txt
2. Using GPT to generate a summary description
3. Creating a dated summary file
4. Zipping the human-provided-content folder
5. Moving the archive to ~/MyGoogleDrive/video campaigns

Usage: python "Step 8 - Archive Project.py" current-project/
"""

import os
import sys
import json
import zipfile
import shutil
from datetime import datetime
from pathlib import Path
import openai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def load_project_config(project_dir):
    """Load project configuration"""
    config_path = os.path.join(project_dir, "human-provided-content", "project-config.json")
    
    if not os.path.exists(config_path):
        print(f"Error: Project configuration not found at {config_path}")
        return None
    
    with open(config_path, 'r') as f:
        return json.load(f)

def read_video_content(project_dir):
    """Read the video content from resemble-a-roll.txt"""
    content_path = os.path.join(project_dir, "human-provided-content", "resemble-a-roll.txt")
    
    if not os.path.exists(content_path):
        print(f"Error: Video content not found at {content_path}")
        return None
    
    with open(content_path, 'r') as f:
        return f.read().strip()

def generate_summary_with_gpt(video_content, video_title):
    """Use GPT to generate a professional summary of the video content"""
    client = openai.OpenAI()
    
    prompt = f"""You are creating an archive summary for a TrainerDay feature video. 

Video Title: {video_title}

Video Script Content:
{video_content}

Please create a concise, professional summary (2-3 paragraphs) that describes:
1. What feature or update this video demonstrates
2. The main benefits and improvements for users
3. Key functionality being showcased

Write this as documentation for future reference, focusing on what the video teaches viewers about TrainerDay's capabilities."""

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a professional video content analyst creating archive documentation."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
    
    except Exception as e:
        print(f"Error generating summary with GPT: {e}")
        return f"Video Content Summary:\n\n{video_content}\n\nTitle: {video_title}"

def create_summary_file(project_dir, video_title, summary_content):
    """Create the dated summary file in campaigns folder"""
    # Get today's date in YYYY-MM-DD format
    today = datetime.now().strftime("%Y-%m-%d")
    
    # Clean title for filename (remove special characters)
    clean_title = "".join(c for c in video_title if c.isalnum() or c in (' ', '-', '_')).strip()
    clean_title = clean_title.replace(' ', '_')
    
    # Create campaigns directory if it doesn't exist
    campaigns_dir = os.path.join(os.path.dirname(project_dir), "campaigns")
    os.makedirs(campaigns_dir, exist_ok=True)
    
    # Create filename
    filename = f"{today}_{clean_title}.txt"
    filepath = os.path.join(campaigns_dir, filename)
    
    # Write summary file
    with open(filepath, 'w') as f:
        f.write(f"# {video_title}\n")
        f.write(f"Date: {today}\n\n")
        f.write(summary_content)
        f.write(f"\n\n---\nGenerated by Step 8 - Archive Project\nProject archived: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    print(f"✓ Created summary file: campaigns/{filename}")
    return filename, clean_title

def create_zip_archive(project_dir, clean_title):
    """Create ZIP archive of human-provided-content folder"""
    today = datetime.now().strftime("%Y-%m-%d")
    zip_filename = f"{today}_{clean_title}.zip"
    zip_path = os.path.join(project_dir, zip_filename)
    
    human_content_dir = os.path.join(project_dir, "human-provided-content")
    
    if not os.path.exists(human_content_dir):
        print(f"Error: human-provided-content directory not found")
        return None
    
    # Create ZIP file
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(human_content_dir):
            for file in files:
                file_path = os.path.join(root, file)
                # Create archive path relative to human-provided-content
                archive_path = os.path.relpath(file_path, human_content_dir)
                zipf.write(file_path, archive_path)
    
    print(f"✓ Created ZIP archive: {zip_filename}")
    return zip_path, zip_filename

def move_to_campaigns_folder(zip_path, zip_filename):
    """Move ZIP file to ~/MyGoogleDrive/video campaigns"""
    campaigns_dir = os.path.expanduser("~/MyGoogleDrive/video campaigns")
    
    # Create campaigns directory if it doesn't exist
    os.makedirs(campaigns_dir, exist_ok=True)
    
    # Move ZIP file
    destination = os.path.join(campaigns_dir, zip_filename)
    shutil.move(zip_path, destination)
    
    print(f"✓ Moved archive to: {destination}")
    return destination

def main():
    if len(sys.argv) != 2:
        print("Usage: python 'Step 8 - Archive Project.py' current-project/")
        sys.exit(1)
    
    project_dir = sys.argv[1].rstrip('/')
    
    if not os.path.exists(project_dir):
        print(f"Error: Project directory '{project_dir}' not found")
        sys.exit(1)
    
    print("Step 8 - Archive Project")
    print("=" * 50)
    
    # Step 1: Load project configuration
    print("1. Loading project configuration...")
    config = load_project_config(project_dir)
    if not config:
        sys.exit(1)
    
    video_title = config.get("youtube_title", "TrainerDay Video")
    print(f"   Video Title: {video_title}")
    
    # Step 2: Read video content
    print("2. Reading video content...")
    video_content = read_video_content(project_dir)
    if not video_content:
        sys.exit(1)
    
    print(f"   Content length: {len(video_content)} characters")
    
    # Step 3: Generate summary with GPT
    print("3. Generating summary with GPT...")
    summary = generate_summary_with_gpt(video_content, video_title)
    
    # Step 4: Create summary file
    print("4. Creating dated summary file...")
    summary_filename, clean_title = create_summary_file(project_dir, video_title, summary)
    
    # Step 5: Create ZIP archive
    print("5. Creating ZIP archive...")
    zip_path, zip_filename = create_zip_archive(project_dir, clean_title)
    if not zip_path:
        sys.exit(1)
    
    # Step 6: Move to campaigns folder
    print("6. Moving to campaigns folder...")
    final_destination = move_to_campaigns_folder(zip_path, zip_filename)
    
    print("\n" + "=" * 50)
    print("✓ Project archiving completed successfully!")
    print(f"✓ Summary file: {summary_filename}")
    print(f"✓ Archive location: {final_destination}")
    print("\nProject is now archived and ready for future reference.")

if __name__ == "__main__":
    main()